	.data
strn: .asciiz "\n"
str1: .asciiz "ADD: "
str2: .asciiz "SUB: "
str3: .asciiz "AND: "
str4: .asciiz "OR: "
str5: .asciiz "XOR: "
str6: .asciiz "MASK: "
str7: .asciiz "SLL("
str8: .asciiz "): "
str9: .asciiz "SRL("
str10: .asciiz "): "

	.text
main:
	li $v0, 5		# read int
	syscall
	move $s0, $v0	# $s0 = a
	li $v0, 5
	syscall
	move $s1, $v0 	# $s1 = b
	li $v0, 5
	syscall
	move $s2, $v0	# $s2 = c
	jal soma
	jal subtracao
	jal logicaland
	jal logicalor
	jal logicalxor
	jal mask
	jal shiftl
	jal shiftr
	li $v0, 10
	syscall
	
soma:
	add $t0, $s0, $s1
	li $v0, 4
	la $a0, str1
	syscall
	li $v0, 1
	move $a0, $t0
	syscall
	li $v0, 4
	la $a0, strn
	syscall
	jr $ra
	
subtracao:
	sub $t0, $s0, $s1
	li $v0, 4
	la $a0, str2
	syscall
	li $v0, 1
	move $a0, $t0
	syscall
	li $v0, 4
	la $a0, strn
	syscall
	jr $ra

logicaland:
	and $t0, $s0, $s1
	li $v0, 4
	la $a0, str3
	syscall
	li $v0, 1
	move $a0, $t0
	syscall
	li $v0, 4
	la $a0, strn
	syscall
	jr $ra
	
logicalor:
	or $t0, $s0, $s1
	li $v0, 4
	la $a0, str4
	syscall
	li $v0, 1
	move $a0, $t0
	syscall
	li $v0, 4
	la $a0, strn
	syscall
	jr $ra
	
logicalxor:
	xor $t0, $s0, $s1
	li $v0, 4
	la $a0, str5
	syscall
	li $v0, 1
	move $a0, $t0
	syscall
	li $v0, 4
	la $a0, strn
	syscall
	jr $ra

mask:
	li $t1, 0x0000001F
	and $s3, $t1, $s2
	li $v0, 4
	la $a0, str6
	syscall
	li $v0, 1
	move $a0, $s3
	syscall
	li $v0, 4
	la $a0, strn
	syscall
	jr $ra

shiftl:
	sllv $t0,$s0,$s3
	li $v0, 4
	la $a0, str7
	syscall
	li $v0, 1
	move $a0, $s3
	syscall
	li $v0, 4
	la $a0, str8
	syscall
	li $v0, 1
	move $a0, $t0
	syscall
	li $v0, 4
	la $a0, strn
	syscall
	jr $ra

shiftr:
	srlv $t0,$s1,$s3
	li $v0, 4
	la $a0, str9
	syscall
	li $v0, 1
	move $a0, $s3
	syscall
	li $v0, 4
	la $a0, str10
	syscall
	li $v0, 1
	move $a0, $t0
	syscall
	li $v0, 4
	la $a0, strn
	syscall
	jr $ra
